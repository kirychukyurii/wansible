{
  "__inputs": [
    {
      "name": "DS_POSTGRESQL",
      "label": "PostgreSQL",
      "description": "",
      "type": "datasource",
      "pluginId": "postgres",
      "pluginName": "PostgreSQL"
    },
    {
      "name": "VAR_DOMAIN_ID",
      "type": "constant",
      "label": "domain_id",
      "value": "1",
      "description": ""
    }
  ],
  "__elements": [],
  "__requires": [
    {
      "type": "panel",
      "id": "gauge",
      "name": "Gauge",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "9.0.2"
    },
    {
      "type": "datasource",
      "id": "postgres",
      "name": "PostgreSQL",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "limit": 100,
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1661174751310,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 9,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Количесто"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "decimals",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Среднее время в очереди (сек)"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "unit",
                "value": "s"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "maxDataPoints": 500,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select\n       x.x AS \"time\",\n       coalesce(t.\"Quantity\", 0) \"Members in queue\",\n       coalesce(t.\"Avg queue time (sec)\", 0) \"Avg queue time (sec)\"\nfrom generate_series(public.time_bucket('1m', now() - interval '10h'), now(), '1 m') x\nleft join (\n     select\n       public.time_bucket('1m', h.joined_at at time zone 'UTC') at time zone 'UTC' x,\n       count(*) \"Quantity\",\n       extract(epoch from avg(coalesce(h.bridged_at, h.leaving_at) - h.joined_at)) \"Avg queue time (sec)\"\n    from call_center.cc_member_attempt_history h\n    where h.domain_id = $domain_id\n        and h.joined_at between public.time_bucket('1m', now() - interval '10h')  and now()\n        and  h.queue_id in ($iQ)\n    group by public.time_bucket('1m', h.joined_at at time zone 'UTC')\n    limit 360\n) t on t.x = x.x;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": "10h",
      "title": "Operator loads",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "max": 1,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 0.6
              },
              {
                "color": "dark-green",
                "value": 0.8
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 9
      },
      "id": 4,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.0.2",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select time_bucket('$__interval', h.joined_at) as time, \n       count(*) filter ( where h.bridged_at - h.joined_at < interval '10 sec')::decimal /  count(*)::decimal  as sl20\nfrom call_center.cc_member_attempt_history h\nwhere h.joined_at between $__timeFrom()::timestamptz and $__timeTo()::timestamptz \nand h.queue_id in ($iQ)\ngroup by 1\norder by 1 desc",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "SL (10 sec)",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-orange",
                "value": null
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "FCR"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-red",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 60
                    },
                    {
                      "color": "dark-green",
                      "value": 80
                    }
                  ]
                }
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 4,
        "y": 9
      },
      "id": 6,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {
          "titleSize": 10,
          "valueSize": 42
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.0.2",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select sum(b)::double precision as \"number of solved\",  sum(ac)::double precision \"total calls\",\n  (sum(b)::double precision / sum(ac)::double precision) * 100  as \"FCR\"\nfrom (\n    select case when ch.bridged_at notnull  then 1 else 1 end ac,\n       case when ch.bridged_at notnull and count(ch.from_number) over (partition by ch.from_number) = 1  then 1 else 0 end b\n    from call_center.cc_calls_history ch\n    where ch.domain_id = $domain_id\n      and ch.created_at between $__timeFrom()::timestamptz and $__timeTo()::timestamptz\n      and ch.parent_id isnull\n      and ch.queue_id in ($iQ)\n      and ch.direction = 'inbound'\n) x;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Solving a client's question from the first call",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 1000,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "dark-red",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 60
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Answered"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Missed"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 8,
        "y": 9
      },
      "id": 8,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "first"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "9.0.2",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select  \n  count(*) filter ( where h1.bridged_at notnull and h1.agent_id notnull ) \"Answered\",  \n  count(*) filter ( where h1.bridged_at isnull and q.type in (1, 6, 7)   ) \"Missed\"\nfrom call_center.cc_member_attempt_history h1\n  inner join call_center.cc_queue q on q.id = h1.queue_id\nwhere h1.queue_id in ($iQ)\n  and h1.joined_at between $__timeFrom()::timestamptz and $__timeTo()::timestamptz\n  and h1.domain_id = $domain_id",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "ACD",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 1,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "dark-red",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 55
              },
              {
                "color": "dark-green",
                "value": 85
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 12,
        "y": 9
      },
      "id": 10,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "9.0.2",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select  \n  count(*) filter ( where h1.bridged_at notnull and h1.agent_id notnull)::decimal /  count(*)::decimal \nfrom call_center.cc_member_attempt_history h1\n  inner join call_center.cc_queue q on q.id = h1.queue_id\nwhere h1.queue_id in ($iQ)\n  and h1.joined_at between $__timeFrom()::timestamptz and $__timeTo()::timestamptz\n  and h1.domain_id = $domain_id",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Successful",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 120
              },
              {
                "color": "dark-red",
                "value": 180
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 9
      },
      "id": 12,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.0.2",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select time_bucket('$__interval', h.created_at::timestamptz) as time, avg(extract (epoch from h.hangup_at - h.bridged_at)) b2\nfrom call_center.cc_calls_history h\nwhere h.created_at between $__timeFrom()::timestamptz and $__timeTo()::timestamptz \n and h.queue_id in ($iQ) and h.bridged_at notnull\ngroup by 1\norder by 1 desc",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Average talk time",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 10
              },
              {
                "color": "#EAB839",
                "value": 15
              },
              {
                "color": "dark-red",
                "value": 20
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 9
      },
      "id": 18,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.0.2",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select time_bucket('$__interval', h.created_at::timestamptz) as time, avg(extract (epoch from h.bridged_at - h.created_at)) b2\nfrom call_center.cc_calls_history h\nwhere h.created_at between $__timeFrom()::timestamptz and $__timeTo()::timestamptz \n and h.queue_id in ($iQ) and h.bridged_at notnull\ngroup by 1\norder by 1 desc",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Average response time",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "displayMode": "auto"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Waiting time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "s"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Queue time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "s"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 10,
        "x": 0,
        "y": 14
      },
      "id": 14,
      "options": {
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "8.2.5",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select h1.created_at                 \"Time of call\",\n       h1.from_number                                                 \"Number\",\n\n       extract(epoch from coalesce(h1.ivr_wait, interval '0 sec')) \"Waiting time\",\n       coalesce(q.name, '')                                           \"Queue\",\n       extract(epoch from coalesce(h1.q_wait, interval '0 sec'))   \"Queue time\"\n\nfrom (\n         select h1.from_number,\n                h1.from_name,\n                h1.created_at,\n                h1.hangup_at,\n                h1.destination,\n                case\n                    when h1.attempt_id isnull then h1.hangup_at - h1.created_at\n                    else (a.joined_at) - h1.created_at end ivr_wait,\n                a.leaving_at - a.joined_at                                           q_wait,\n                a.queue_id,\n                h1.attempt_id\n         from call_center.cc_calls_history h1\n                  left join call_center.cc_member_attempt_history a on a.id = h1.attempt_id\n         where h1.domain_id =  $domain_id\n           and h1.direction = 'inbound'\n           and h1.created_at  between (($__timeFrom()) ) and (($__timeTo()))\n           and h1.bridged_at isnull\n           and h1.parent_id isnull\n           and h1.queue_id in ($iQ)\n           and h1.user_id isnull\n           and not exists(select 1\n                          from call_center.cc_calls c\n                          where h1.from_number = any (array [c.destination, c.from_number, c.to_number]))\n     ) h1\n         left join (\n    select case when direction = 'inbound' then from_number else destination end destination\n         , max(h2.created_at)                                                    created_at\n    from call_center.cc_calls_history h2\n    where h2.domain_id = $domain_id\n      and h2.parent_id isnull\n      and created_at between (($__timeFrom())) and (($__timeTo()))\n      and h2.bridged_at notnull\n    group by 1\n) ho on h1.from_number = ho.destination\n         left join call_center.cc_queue q on q.id = h1.queue_id\nwhere ho.created_at isnull\n   or h1.created_at > ho.created_at\norder by h1.created_at desc\nlimit 250",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Missed",
      "type": "table"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "displayMode": "auto"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dateTimeAsIso"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Pending"
            },
            "properties": [
              {
                "id": "unit",
                "value": "s"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "In call"
            },
            "properties": [
              {
                "id": "unit",
                "value": "s"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Processing"
            },
            "properties": [
              {
                "id": "unit",
                "value": "s"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 14,
        "x": 10,
        "y": 14
      },
      "id": 16,
      "options": {
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "8.2.5",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select\r\n       c.created_at \"Time\",\r\n       case when c.direction = 'inbound' then c.from_number else c.destination end \"Number\",\r\n      -- case when c.direction = 'inbound' then 'Входящий' else 'Исходящий' end \"Направление\",\r\n       coalesce(u.name, u.username, '') \"Agent\",\r\n       coalesce(q.name, '') \"Queue\",\r\n       case when a.joined_at isnull then\r\n           extract(epoch from now() - c.created_at)\r\n       else\r\n           extract(epoch from a.joined_at - c.created_at)\r\n       end \"Time in IVR\",\r\n       extract(epoch from coalesce(a.wait, interval '0')) \"Pending\",\r\n       case when a.id notnull then extract(epoch from coalesce(a.talk, interval '0')) else extract(epoch from coalesce(now() - c.bridged_at, interval '0')) end \"In call\",\r\n       extract(epoch from coalesce(a.wrap, interval '0')) \"Processing\"\r\nfrom call_center.cc_calls c\r\n         left join (\r\n            select\r\n            a.id,\r\n            a.joined_at,\r\n            a.queue_id,\r\n            a.agent_id,\r\n            a.member_call_id,\r\n            case when a.bridged_at isnull then\r\n                   now() - a.joined_at\r\n                else a.bridged_at - a.joined_at\r\n            end wait,\r\n            case when a.bridged_at notnull and a.leaving_at isnull then\r\n                   now() - a.bridged_at\r\n                else a.leaving_at - a.joined_at\r\n            end talk,\r\n            case when  a.leaving_at notnull and a.bridged_at notnull then\r\n                   now() - a.leaving_at\r\n            end wrap\r\n            from call_center.cc_member_attempt a\r\n         ) a on a.member_call_id = c.id\r\n         left join call_center.cc_queue q on q.id = a.queue_id\r\n         left join call_center.cc_agent ag on ag.id = a.agent_id\r\n         left join directory.wbt_user u on case when a.joined_at isnull then c.user_id = u.id else u.id = ag.user_id end\r\nwhere c.parent_id isnull and c.direction notnull and c.domain_id = $domain_id and c.queue_id in ($iQ)\r\norder by c.created_at desc",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Active calls",
      "type": "table"
    }
  ],
  "refresh": "",
  "schemaVersion": 36,
  "style": "dark",
  "tags": [
    "dash"
  ],
  "templating": {
    "list": [
      {
        "hide": 2,
        "label": "domain_id",
        "name": "domain_id",
        "query": "${VAR_DOMAIN_ID}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_DOMAIN_ID}",
          "text": "${VAR_DOMAIN_ID}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_DOMAIN_ID}",
            "text": "${VAR_DOMAIN_ID}",
            "selected": false
          }
        ]
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_POSTGRESQL}"
        },
        "definition": "select name AS __text, id::int AS __value from call_center.cc_queue where enabled is true and domain_id= $domain_id and type in (1,6);",
        "hide": 0,
        "includeAll": false,
        "label": "Queues",
        "multi": true,
        "name": "iQ",
        "options": [],
        "query": "select name AS __text, id::int AS __value from call_center.cc_queue where enabled is true and domain_id= $domain_id and type in (1,6);",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now/d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Incoming queue",
  "uid": "rH9z85nnz",
  "version": 1,
  "weekStart": ""
}